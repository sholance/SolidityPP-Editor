diff --git a/node_modules/smartcontract-app/src/smartcontract-app.js b/node_modules/smartcontract-app/src/smartcontract-app.js
index fd85955..3f7457a 100644
--- a/node_modules/smartcontract-app/src/smartcontract-app.js
+++ b/node_modules/smartcontract-app/src/smartcontract-app.js
@@ -24,7 +24,7 @@ const colors = require('theme')
 // Styling variables
 
 var css
-var fonts = [ "https://use.fontawesome.com/releases/v5.8.2/css/all.css",
+var fonts = ["https://use.fontawesome.com/releases/v5.8.2/css/all.css",
   'https://fonts.googleapis.com/css?family=Overpass+Mono']
 var fontAwesome = bel`<link href=${fonts[0]} rel='stylesheet' type='text/css'>`
 var overpassMono = bel`<link href=${fonts[1]} rel='stylesheet' type='text/css'>`
@@ -39,10 +39,65 @@ window.ethers = ethers //@TODO remove after crosslink
 var provider
 var contract
 
+async function changeNetworkToKrc() {
+  await ethereum.request({
+    method: 'wallet_addEthereumChain',
+    params: [
+      {
+        chainId: "0x18",
+        chainName: "kardiachain",
+        nativeCurrency: {
+          name: "KAI",
+          symbol: "KAI",
+          decimals: 18
+        },
+        rpcUrls: ["https://rpc.kardiachain.io"],
+        blockExplorerUrls: ["https://explorer.kardiachain.io/"]
+      }]
+  });
+}
+
+
+async function changeNetworkToKrcTest() {
+  await ethereum.request({
+    method: 'wallet_addEthereumChain',
+    params: [
+      {
+        chainId: "0xF2",
+        chainName: "kardiachain Testnet",
+        nativeCurrency: {
+          name: "KAI",
+          symbol: "KAI",
+          decimals: 18
+        },
+        rpcUrls: ["https://dev.kardiachain.io"],
+        blockExplorerUrls: ["https://explorer.kardiachain.io/"]
+      }]
+  });
+}
+
 async function getProvider() {
   if (window.web3 && window.web3.currentProvider) {
     try {
       // Acccounts now exposed
+      changeNetworkToKrc()
+      provider = new ethers.providers.Web3Provider(window.web3.currentProvider)
+      // Request account access if needed
+      await ethereum.enable();
+    } catch (error) {
+      console.log(error)
+    }
+  } else {
+    window.open("http://www.metamask.io/")
+  }
+  return provider
+}
+
+async function getTestProvider() {
+  if (window.web3 && window.web3.currentProvider) {
+    try {
+      // Acccounts now exposed
+      changeNetworkToKrcTest()
       provider = new ethers.providers.Web3Provider(window.web3.currentProvider)
       // Request account access if needed
       await ethereum.enable();
@@ -50,7 +105,7 @@ async function getProvider() {
       console.log(error)
     }
   } else {
-    window.open("https://metamask.io/")
+    window.open("http://www.metamask.io/")
   }
   return provider
 }
@@ -80,9 +135,9 @@ function displayContractUI(result) {   // compilation result metadata
       },
       sources: { '': result[0].sources.sourcecode }
     }
-}
+  }
   if (!opts || !opts.metadata) {
-    return  bel`
+    return bel`
     <div class=${css.preview}>
       <div class=${css.error}>
         <div class=${css.errorTitle}>error <i class="${css.errorIcon} fa fa-exclamation-circle"></i></div>
@@ -158,10 +213,10 @@ function displayContractUI(result) {   // compilation result metadata
       functions: getContractFunctions()
     }
 
-    function sort (functions) {
+    function sort(functions) {
       return functions.filter(x => x.type === 'function').sort((a, b) => {
-        var d=type2num(a) - type2num(b)
-        if (d==0) {
+        var d = type2num(a) - type2num(b)
+        if (d == 0) {
           if (a.name > b.name) return 1;
           if (a.name < b.name) return -1;
         }
@@ -169,7 +224,7 @@ function displayContractUI(result) {   // compilation result metadata
       })
     }
 
-    function type2num ({ stateMutability: sm }) {
+    function type2num({ stateMutability: sm }) {
       if (sm === 'view') return 1
       if (sm === 'nonpayable') return 2
       if (sm === 'pure') return 3
@@ -179,11 +234,11 @@ function displayContractUI(result) {   // compilation result metadata
 
     var sorted = sort(metadata.functions)
 
-    function generateInputContainer (field) {
-      var theme = { classes: css, colors}
+    function generateInputContainer(field) {
+      var theme = { classes: css, colors }
       var name = field.name
       var type = field.type
-      var inputField = getInputField( {theme, type, cb})
+      var inputField = getInputField({ theme, type, cb })
       var inputContainer = bel`
         <div class=${css.inputContainer}>
           <div class=${css.inputParam} title="data type: ${type}">${name || 'key'}</div>
@@ -191,7 +246,7 @@ function displayContractUI(result) {   // compilation result metadata
           <div class=${css.output}></div>
         </div>`
       return inputContainer
-      function cb (msg, el, value) {
+      function cb(msg, el, value) {
         var oldOutput = el.parentNode.querySelector("[class^='output']")
         var output = oldOutput ? oldOutput : output = bel`<div class=${css.output}></div>`
         output.innerHTML = ""
@@ -200,7 +255,7 @@ function displayContractUI(result) {   // compilation result metadata
       }
     }
 
-    function getInputField ({ theme, type, cb}) {
+    function getInputField({ theme, type, cb }) {
       var field
       if ((type.search(/\]/) != -1)) {
         var arrayInfo = type.split('[')[1]
@@ -217,10 +272,10 @@ function displayContractUI(result) {   // compilation result metadata
       return field
     }
 
-    function functions (fn) {
+    function functions(fn) {
       var label = fn.stateMutability
       var fnName = bel`<a title="${glossary(label)}" class=${css.fnName}><div class=${css.name}>${fn.name}</div></a>`
-      var title = bel`<div class=${css.title} onclick=${e=>toggle(e, null, null)}>${fnName}</div>`
+      var title = bel`<div class=${css.title} onclick=${e => toggle(e, null, null)}>${fnName}</div>`
       var send = bel`<div class=${css.send} onclick=${e => sendTx(fn.name, label, e)}><i class="${css.icon} fa fa-arrow-circle-right"></i></div>`
       var functionClass = css[label]
       var el = bel`
@@ -233,11 +288,11 @@ function displayContractUI(result) {   // compilation result metadata
           </ul>
         </div>
       </div>`
-      if (label === 'payable')  send.parentNode.prepend(inputPayable(label))
+      if (label === 'payable') send.parentNode.prepend(inputPayable(label))
       return el
     }
 
-    async function sendTx (fnName, label, e) {
+    async function sendTx(fnName, label, e) {
       var loader = bel`<div class=${css.txReturnItem}>Awaiting network confirmation ${loadingAnimation(colors)}</div>`
       var container = e.target.parentNode.parentNode.parentNode.parentNode
       var txReturn = container.querySelector("[class^='txReturn']") || bel`<div class=${css.txReturn}></div>`
@@ -255,7 +310,7 @@ function displayContractUI(result) {   // compilation result metadata
           fnName
         }
         if (contractType === 'transaction') {
-          const callableTx = await makeContractCallable (contract, fnName, provider, args, allArgs)
+          const callableTx = await makeContractCallable(contract, fnName, provider, args, allArgs)
           opts.tx = callableTx
           opts.typeTransaction = true
           try {
@@ -275,11 +330,11 @@ function displayContractUI(result) {   // compilation result metadata
       } else {
         let deploy = document.querySelector("[class^='deploy']")
         deploy.classList.add(css.bounce)
-        setTimeout(()=>deploy.classList.remove(css.bounce), 3500)
+        setTimeout(() => deploy.classList.remove(css.bounce), 3500)
       }
     }
 
-    async function executeTx (contract, fnName, provider, args, allArgs, opts) {
+    async function executeTx(contract, fnName, provider, args, allArgs, opts) {
       try {
         let contractAsCurrentSigner = contract.connect(signer)
         var tx
@@ -289,7 +344,7 @@ function displayContractUI(result) {   // compilation result metadata
       } catch (e) { txReturn.children.length > 1 ? txReturn.removeChild(loader) : container.removeChild(txReturn) }
     }
 
-    async function makeContractCallable (contract, fnName, provider, args, allArgs) {
+    async function makeContractCallable(contract, fnName, provider, args, allArgs) {
       const fn = contract.interface.functions[fnName]
       if (fn.outputs.length > 0) {
         const signature = fn.signature
@@ -301,14 +356,14 @@ function displayContractUI(result) {   // compilation result metadata
         let signer = await provider.getSigner()
         const callableAsCurrentSigner = await contractCallable.connect(signer)
         try {
-          const callableFn =callableAsCurrentSigner.functions[fnName]
+          const callableFn = callableAsCurrentSigner.functions[fnName]
           return await callableFn(...args)
         } catch (e) { console.log(e) }
       } else return []
     }
 
 
-    function toggleAll (e) {
+    function toggleAll(e) {
       var fnContainer = e.currentTarget.parentElement.parentElement.children[2]
       var constructorToggle = e.currentTarget.children[0]
       var constructorIcon = constructorToggle.children[0]
@@ -324,10 +379,10 @@ function displayContractUI(result) {   // compilation result metadata
       }
     }
 
-    function toggle (e, fun, constructorIcon) {
+    function toggle(e, fun, constructorIcon) {
       var fn
       var toggleContainer
-      function removeLogs (el) {
+      function removeLogs(el) {
         var txReturn = el.parentNode.querySelectorAll("[class^='txReturn']")[0]
         if (txReturn) {
           txReturn.classList.remove(css.visible)
@@ -335,7 +390,7 @@ function displayContractUI(result) {   // compilation result metadata
           txReturn.style.minHeight = 0
         }
       }
-      function addLogs (el) {
+      function addLogs(el) {
         var txReturn = el.parentNode.querySelectorAll("[class^='txReturn']")[0]
         if (txReturn) {
           txReturn.classList.remove(css.hidden)
@@ -359,7 +414,7 @@ function displayContractUI(result) {   // compilation result metadata
           fnInputs.classList.add(css.visible)
           addLogs(fn)
         }
-      // TOGGLE triggered with onclick on function title (toggle single function)
+        // TOGGLE triggered with onclick on function title (toggle single function)
       } else {
         fn = e.currentTarget.parentNode
         toggleContainer = e.currentTarget.children[1]
@@ -381,15 +436,15 @@ function displayContractUI(result) {   // compilation result metadata
       }
     }
 
-// Create and deploy contract using WEB3
+    // Create and deploy contract using WEB3
     async function deployContract() {
       let abi = solcMetadata.output.abi
       let bytecode = opts.metadata.bytecode
-      provider =  await getProvider()
+      provider = await getProvider()
       let signer = await provider.getSigner()
       var el = document.querySelector("[class^='ctor']")
       let factory = await new ethers.ContractFactory(abi, bytecode, signer)
-      el.replaceWith(bel`<div class=${css.deploying}>Publishing to Ethereum network ${loadingAnimation(colors)}</div>`)
+      el.replaceWith(bel`<div class=${css.deploying}>Publishing to KardiaChain network ${loadingAnimation(colors)}</div>`)
       try {
         var allArgs = getArgs(el, 'inputContainer')
         let args = allArgs.args
@@ -408,26 +463,52 @@ function displayContractUI(result) {   // compilation result metadata
       }
     }
 
-    function activateConnect (e) {
+    function activateConnect(e) {
       if (active != e.target) {
         setToActive(e.target)
         topContainer.removeChild(ctor)
+        topContainer.removeChild(vctor)
         topContainer.appendChild(connectContainer)
       }
     }
 
-    function activatePublish (e) {
+    function activatePublish(e) {
       if (active != e.target) {
         setToActive(e.target)
         topContainer.removeChild(connectContainer)
         topContainer.appendChild(ctor)
+        topContainer.appendChild(vctor)
       }
     }
-
-    async function connectToContract () {
+    async function deployTestContract() {
       let abi = solcMetadata.output.abi
       let bytecode = opts.metadata.bytecode
-      provider =  await getProvider()
+      provider = await getTestProvider()
+      let signer = await provider.getSigner()
+      var el = document.querySelector("[class^='vctor']")
+      let factory = await new ethers.ContractFactory(abi, bytecode, signer)
+      el.replaceWith(bel`<div class=${css.deploying}>Publishing to KardiaChain Testnet ${loadingAnimation(colors)}</div>`)
+      try {
+        var allArgs = getArgs(el, 'inputContainer')
+        let args = allArgs.args
+        var instance
+        if (allArgs.overrides) { instance = await factory.deploy(...args, allArgs.overrides) }
+        else { instance = await factory.deploy(...args) }
+        // instance = await factory.deploy(...args)
+        contract = instance
+        let deployed = await contract.deployed()
+        topContainer.innerHTML = ''
+        topContainer.appendChild(makeDeployReceipt(provider, contract, false))
+        activateSendTx(contract)
+      } catch (e) {
+        let loader = document.querySelector("[class^='deploying']")
+        loader.replaceWith(ctor)
+      }
+    }
+    async function connectToContract() {
+      let abi = solcMetadata.output.abi
+      let bytecode = opts.metadata.bytecode
+      provider = await getProvider()
       let signer = await provider.getSigner()
       var el = document.querySelector("[class^='connectContainer']")
       var allArgs = getArgs(el, 'inputContainer')
@@ -438,7 +519,7 @@ function displayContractUI(result) {   // compilation result metadata
       try {
         contract = new ethers.Contract(address, abi, provider)
         var code = await provider.getCode(address)
-        if (!code || code === '0x') {
+        if (!code || code === '0x' || code === 'vi') {
           let loader = document.querySelector("[class^='connecting']")
           loader.replaceWith(connectContainer)
           console.log('Not a valid contract address')
@@ -454,7 +535,7 @@ function displayContractUI(result) {   // compilation result metadata
       }
     }
 
-    function setToActive (e) {
+    function setToActive(e) {
       e.classList.add(css.activetab)
       active.classList.remove(css.activetab)
       active = e
@@ -462,10 +543,10 @@ function displayContractUI(result) {   // compilation result metadata
 
     function activateSendTx(instance) {
       let sendButtons = document.querySelectorAll("[class^='send']")
-      for(var i = 0;i < sendButtons.length;i++) {
+      for (var i = 0; i < sendButtons.length; i++) {
         sendButtons[i].style.color = colors.slateGrey
       }
-      for(var i = 0;i < sendButtons.length;i++) {
+      for (var i = 0; i < sendButtons.length; i++) {
         sendButtons[i].style.color = colors.whiteSmoke
       }
     }
@@ -473,15 +554,21 @@ function displayContractUI(result) {   // compilation result metadata
     var topContainer = bel`<div class=${css.topContainer}></div>`
     var ctor = bel`<div class="${css.ctor}">
       ${metadata.constructorInput}
-      <div class=${css.deploy} onclick=${()=>deployContract()}
+      <div class=${css.deploy} onclick=${() => deployContract()}
         title="Publish the contract first (this executes the Constructor function). After that you will be able to start sending/receiving data using the contract functions below.">
-        <div class=${css.deployTitle}>Publish</div>
+        <div class=${css.deployTitle}>Publish to KardiaChain Mainnet</div>
         <i class="${css.icon} fa fa-arrow-circle-right"></i>
       </div>
     </div>`
+    var vctor = bel`<div class="${css.vctor}">
+    <div class=${css.deployKrc} onclick=${() => deployTestContract()} >
+      <div class=${css.deployKrcTitle}>Publish to KardiaChain Testnet</div>
+      <i class="${css.icon} fa fa-arrow-circle-right"></i>
+    </div>
+  </div>`
     const connectContainer = bel`<div class="${css.connectContainer}">
-      ${generateInputContainer({name: 'contract_address', type:'address'})}
-      <div class=${css.connect} onclick=${()=>connectToContract()}
+      ${generateInputContainer({ name: 'contract_address', type: 'address' })}
+      <div class=${css.connect} onclick=${() => connectToContract()}
         title="Enter address of the deployed contract you want to connect with. Select the correct network and click Connect. After that you will be able to interact with the chosen contract.">
         <div class=${css.connectTitle}>Connect</div>
         <i class="${css.icon} fa fa-arrow-circle-right"></i>
@@ -489,23 +576,24 @@ function displayContractUI(result) {   // compilation result metadata
     </div>`
     var active, tabs = bel`<div class=${css.tabsContainer}>
       ${active = bel`<div class="${css.tab} ${css.activetab}"
-      onclick=${e=>activatePublish(e)}>Publish</div>`}
+      onclick=${e => activatePublish(e)}>Publish</div>`}
       <div class="${css.tab}"
-      onclick=${e=>activateConnect(e)}>Connect</div>
+      onclick=${e => activateConnect(e)}>Connect</div>
     </div>`
     topContainer.appendChild(tabs)
     topContainer.appendChild(ctor)
+    topContainer.appendChild(vctor)
 
     return bel`
     <div class=${css.preview}>
       <div class=${css.constructorFn}>
-        <div class=${css.contractName} onclick=${e=>toggleAll(e)} title="Expand to see the details">
+        <div class=${css.contractName} onclick=${e => toggleAll(e)} title="Expand to see the details">
           ${metadata.constructorName}
           <span class=${css.icon}><i class="fa fa-minus-circle" title="Expand to see the details"></i></span>
         </div>
       </div>
       ${topContainer}
-      <div class=${css.functions}>${sorted.map(fn => { return functions(fn)})}</div>
+      <div class=${css.functions}>${sorted.map(fn => { return functions(fn) })}</div>
     </div>`
   }
 }
@@ -649,6 +737,12 @@ css = csjs`
       padding: 0 5px 0 0;
       font-weight: 800;
     }
+    .deployKrcTitle {
+      font-size: 1.3rem;
+      background-color: ${colors.dark};
+      padding: 0 5px 0 0;
+      font-weight: 800;
+    }
     .deploy, .connect {
       color: ${colors.whiteSmoke};
       display: flex;
@@ -663,6 +757,17 @@ css = csjs`
     .deploy:hover, .connect:hover {
       ${hover()}
     }
+    .deployKrc {
+      color: ${colors.whiteSmoke};
+      display: flex;
+      align-items: center;
+      bottom: -50px;
+      right: -12px;
+      font-size: 1.8rem;
+      position: absolute;
+      background-color: ${colors.dark};
+      cursor: pointer;
+    }
     .send {
       display: flex;
       align-items: baseline;
@@ -768,6 +873,7 @@ css = csjs`
       color: ${colors.whiteSmoke};
     }
     .ctor {}
+    .vctor {}
     .connectContainer {}
     .signature {}
     .pure {
@@ -959,7 +1065,7 @@ function inputStyle() {
   `
 }
 
-function hover () {
+function hover() {
   return `
     cursor: pointer;
     opacity: 0.6;
